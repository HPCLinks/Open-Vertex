." Text automatically generated by txt2man-1.4.7
.TH xcpufs 4  "November 30, 2006" "" ""
.SH NAME
\fBxcpufs \fP- xcpu file system
.SH SYNOPSIS
.nf
.fam C
\fBxcpufs\fP [\fB-hdDs\fP] [\fB-p\fP \fIport\fP] [\fB-t\fP \fItmpdir\fP]
.fam T
.fi
.SH DESCRIPTION
The \fBxcpufs\fP file system provides and interface that can be used to
remotely execute programs on the machine running \fBxcpufs\fP. 
.PP
\fBxcpufs\fP presents the system's resources as files in a directory
hierarchy. The top level directory countains session directories for
each client session that has started by has not completed yet. The
top-level directory also contains the following files:
.TP
.B
arch
when read this file returns a description of the architecture of
the computer running \fBxcpufs\fP. the architecture is normally just a
string of the cpu type.
.TP
.B
clone
when opened and read by a client, \fBxcpufs\fP will create a new
session directory owned by the same client and return its name
as a string
.TP
.B
env
access to the environment under which the \fBxcpufs\fP server is
running
.TP
.B
procs
a list of the processes running on the machine
.TP
.B
state
the current state of the node (intended to be used by the
scheduler)
.PP
Session directories contain the following files (letters in the bracket
indicate whether the client can read and write to the particular file):
.TP
.B
argv
(rw) argument list for the current program
.TP
.B
ctl
(rw) control file for client commands and status
.TP
.B
exec
(rw) a deprecated file pointing to the session binary to be
executed (backward compatibility only, may be removed in the future)
.TP
.B
env
(rw) local environment for this session
.TP
.B
fs
directory containing the binary and all necessary additional
files pushed by the client. May include libraries and input
files.
.TP
.B
stdin
(w)
.TP
.B
stdout
(r)
.TP
.B
stderr
(r) files corresponding to the standard I/O file descriptors of the
running binary
.TP
.B
wait
(r) returns the wait status of the running process. Blocks on
read
.TP
.B
id
(rw) session Job ID
.PP
\fBXcpu\fP(4) clients execute commands via an \fBxcpufs\fP server by opening the
clone file in the root directory of the server and reading a session ID
from it. The session ID corresponds to a directory in the \fBxcpufs\fP root
where the client should copy the binary, all auxillary files pertaining
to the current execution run and, if necessary, all libraries. The
client then sets up the environment and supplies the argument list for
the current run by writing to the "env" and "argv" files respectively.
The job is started by writing the command "exec" to the "exec" file.
The client then writes all necessary input to the "stdin" file and reads
.TP
.B
the program's output from the "stdout" and "stderr" files.
Utility
clients such as \fBxrx\fP(1) wrap all the above conveniently into a single
user command.
.PP
Clients write commands to the "ctl" file to control the current session.
The "ctl" file supports the following commands:
.TP
.B
exec [program] [cwd]
execute the specified pogram ("xc" by default) from
the "fs" directory. If "cwd" is specified, the current working directory
is set to "cwd" (useful when running code out of a network-mounted
global file system). If program starts with a "/" then the binary is
executed directly, otherwise the full path to the session directory is
prepended to "program"
.TP
.B
clone max sessions address list
copy the complete session
directory to a remote node running \fBxcpufs\fP(4). The argument "max
sessions" indicates the maximum number of copies made before
attempting to recursively invoke the "clone" command on the nodes
being copied to. "Address list" is a list of nodes and session
directories on those nodes. This is used in the implementation of
treespawn.
.TP
.B
wipe
close standard I/O files for this session and send SIGTERM to
the running process if such exists
.TP
.B
signal sig
send signal "sig" to the running process
.TP
.B
type normal|persistent
set the session type. Normal sessions will
disappear once all files in their session directories are closed and
there are no more binaries running. Persistent sessions will remain
until explicitly "wipe"\fB-d\fP.
.TP
.B
id
set job id for this session
.SH OPIONS
.TP
.B
\fB-d\fP
shot 9P debugging information
.TP
.B
\fB-D\fP
show general debugging information
.TP
.B
\fB-h\fP
print help message
.TP
.B
\fB-s\fP
do not try to suid to the user (useful when running as non-root)
.TP
.B
\fB-p\fP \fIport\fP
make \fBxcpufs\fP listen to \fIport\fP "\fIport\fP"
.TP
.B
\fB-t\fP tmp
set the temporary directory (where all session files are
.RS
.TP
.B
stored) to "tmp"
.SH EXAMPLES
The following starts up \fBxcpufs\fP on \fIport\fP 20004:
.PP
.nf
.fam C
                $ xcpufs -p 20004

.fam T
.fi
.SH SEE ALSO
\fBv9fs\fP(5), \fBxcpufs\fP(4), \fBstatfs\fP(4), \fBxrx\fP(1), \fBxk\fP(1), \fBxps\fP(1), \fBxstat\fP(1),
\fBspfs\fP(3), \fBspclient\fP(3), \fBssclient\fP(3), \fBstrutil\fP(3), \fBxcpu\fP(3)
.SH BUGS
No, thanks!
